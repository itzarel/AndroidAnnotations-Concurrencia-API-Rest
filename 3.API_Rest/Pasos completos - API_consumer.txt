Configuración
=============

Crear una empty activity
Abrir "<project>/build.gradle" y añade dentro de "allprojects >> repositories":

		maven {
		    url 'https://repo.spring.io/libs-milestone'
		}

Abrir "<project>/app/build.gradle"  y añade dentro de "dependencies":

	    annotationProcessor "org.androidannotations:androidannotations:$AAVersion"
	    implementation "org.androidannotations:androidannotations-api:$AAVersion"

	    annotationProcessor "org.androidannotations:rest-spring:$AAVersion"
	    implementation "org.androidannotations:rest-spring-api:$AAVersion"

	    implementation "org.springframework.android:spring-android-rest-template:$SAVersion"

	    implementation "com.fasterxml.jackson.core:jackson-databind:$JVersion"

Donde "$AAVersion", "$SAVersion" y "$JVersion" son las variables que contienen las versiones de cada dependencia. Se deberá poner como variables globales al archivo:

	def AAVersion = '4.5.2'
	def SAVersion = '2.0.0.M3'
	def JVersion = '2.9.8'

Ahora deberemos conceder permisos a la aplicación para que pueda acceder a nuestra API. Para ello hay dos maneras:
	1. Modificando el manifest con "android:usesCleartextTraffic="true"" (dentro de la sección "application")
		- Esto permite todo el tráfico de nuestra aplicación. Nosotros no emplearemos esta opción, ya que sólo queremos acceder a nuestra API y a "pinterest"
	2. Creando un nuevo recurso en la aplicación. Habrá que crear una carpeta "xml" dentro de "res", dentro de la carpeta "xml" habrá que crear "network_security_config.xml" y añadir lo siguiente:
		<?xml version="1.0" encoding="utf-8"?>
		<network-security-config>
		    <domain-config cleartextTrafficPermitted="true">
			<domain includeSubdomains="true">192.168.0.184</domain>
			<domain includeSubdomains="true">https://www.pinterest.es</domain>
			<domain includeSubdomains="true">https://i.pinimg.com</domain>
		    </domain-config>
		</network-security-config>

	Posteriormente habrá que dar de alta este archivo en el manifes, dentro de la sección "application":
		android:networkSecurityConfig="@xml/network_security_config"

Rest
====
En el lado de Java crearemos un nuevo paquete llamado "rest". Ahí pondremos tanto la API como tanto el POJO donde recuperaremos los datos que nos devolverá la API:
	1. El cliente de la API:
		@Rest(rootUrl = "http://192.168.0.184:8080/avengers", converters = { MappingJackson2HttpMessageConverter.class })
		public interface ApiRestClient {

		}
	Como ves "192.168.0.184" coincide con el primer subdominio que hemos definido en "network_security_config.xml".
	2. El POJO podremos copiar y pegar literalmente el DTO de la API. Lo único es que renombraremos de "AvengerDTO" a "Avenger".

RestService
===========
A continuación abriremos la MainActivity y añadiremos:
    @RestService
    ApiRestClient restClient;

Para poder llamar al cliente que hemos definido de la API.

@Get
====
Actualmente no tenemos ningún método dentro del cliente. Vamos a definir el siguiente:
    @Get("/get/{id}")
    Avenger getById(@Path long id);

El parámetro de entrada al método llamado "id" deberá estar anotado con "@Path" y deberá coincidir con la variable del subrecurso, en este caso "{id}".
Este método es el que nos permite recuperar un elemento de la API por id. Éste lo llamaremos desde el método anotado con "@AfterViews":
    @AfterViews
    void afterInject() {
        restClient.getById(1);
    }

Esto genera un error:
	E/AndroidRuntime: FATAL EXCEPTION: main
	    Process: com.example.openwebinar.myrestapplication, PID: 14324
	    java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.openwebinar.myrestapplication/com.example.openwebinar.myrestapplication.MainActivity_}: android.os.NetworkOnMainThreadException

Ya que estamos bloqueando el hilo principal, por lo que Android no lo va a permitir. Para ello deberemos crear un método en background:
    @AfterViews
    void afterInject() {
        getById();
    }

    @Background
    void getById() {
        Avenger a = restClient.getById(1);
        System.out.println("************************************************************> " + a);
    }

Y como resultado obtendremos:
	I/System.out: ************************************************************> Avenger{id=1, lang='EN', name='Spider-Man', actor='Tom Holland', description='Spider-Man is a fictional superhero created by writer-editor Stan Lee and writer-artist Steve Ditko. He first appeared in the anthology comic book Amazing Fantasy #15 (August 1962) in the Silver Age of Comic Books...', urlimage='https://d29fhpw069ctt2.cloudfront.net/icon/image/59595/preview.svg'}


Post
====
Para poder realizar una llamada post deberemos añadir lo siguiente dentro del cliente API:

    @Post("/setAvenger")
    Avenger addAvenger(@Body Avenger avenger);

Como es un método post no habrá ningun subrecurso, sino que vendrá en el body de la petición. Para recuperar esta información habrá que poner la anotación "@Body" a la variable de entrada del método.
A continuación en la clase "MainActivity" deberemos añadir el siguiente método de background:

    @Background
    void addNewAvenger() {
        Avenger a = new Avenger(101L, "SP", "Iron Pikachu", "Pikachu", "Este es el mejor traje creado en la historia", "https://i.pinimg.com/originals/96/35/ee/9635eee41a5de65d88a6de5230694f1d.gif",
                                Long.parseLong("E9D327", 16), Long.parseLong("D9D8D3", 16), Long.parseLong("F0D12B", 16), Long.parseLong("D8AA20", 16), Long.parseLong("BF1311", 16) );
        Avenger aSaved = restClient.addAvenger(a);
        System.out.println(LINE + aSaved);
    }

Y deberá ser invocado en el método "AfterViews":

    @AfterViews
    void afterInject() {
        getById();
------> addNewAvenger();
    }

Put
===
Para realizar una llamada a la API por put será una combinación de get y post:

    @Put("/change/{id}")
    Avenger replaceAvenger(@Path long id, @Body Avenger avenger);

Y deberá ser invocado en el método "AfterViews":

    @AfterViews
    void afterInject() {
        getById();
        addNewAvenger();
------> changeAvenger();
    }

    @Background
    void changeAvenger() {
        Avenger a = new Avenger();
        a.setName("Iron Spider");
        a.setUrlimage("https://i.pinimg.com/564x/90/61/bf/9061bfd099ba90e7a130639dc96358f9.jpg");
        Avenger aSaved = restClient.replaceAvenger(1L, a);
        System.out.println(LINE + aSaved);
    }

Delete
======
Finalmente para eliminar una entrada empleando el cliente del API deberemos definir:

    @Delete("/delete/{id}")
    void deleteAvenger(@Path long id);

Y en las clase "MainActivity" borraremos el falso vengador que creamos en el paso de post. Como la aplicación simepre va a ejecutarse de cero debemos asegurar que primero se ejecute el post y luego el delete, para ello emplearemos la opción de "serial" de la anotación "@Background" tanto en el método "addNewAvenger" como en el nuevo método "deleteAvenger":

    @AfterViews
    void afterInject() {
        getById();
        addNewAvenger(); <------
        changeAvenger();
------> deleteAvenger();
    }

    @Background(serial = "fakeAvenger")
    void addNewAvenger() {
	...
    }

    @Background(serial = "fakeAvenger")
    void deleteAvenger() {
        restClient.deleteAvenger(101L);
        System.out.println(LINE + 101L);
    }


